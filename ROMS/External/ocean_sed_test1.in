!
!  ROMS/TOMS Standard Input parameters.
!
!svn $Id$
!========================================================= Hernan G. Arango ===
!  Copyright (c) 2002-2016 The ROMS/TOMS Group                                !
!    Licensed under a MIT/X style license                                     !
!    See License_ROMS.txt                                                     !
!==============================================================================
!                                                                             !
! Input parameters can be entered in ANY order, provided that the parameter   !
! KEYWORD (usually, upper case) is typed correctly followed by "="  or "=="   !
! symbols. Any comment lines are allowed and must begin with an exclamation   !
! mark (!) in column one.  Comments may  appear to the right of a parameter   !
! specification to improve documentation.  Comments will be ignored  during   !
! reading.  Blank lines are also allowed and ignored. Continuation lines in   !
! a parameter specification are allowed and must be preceded by a backslash   !
! (\).  In some instances, more than one value is required for a parameter.   !
! If fewer values are provided, the  last value  is assigned for the entire   !
! parameter array.  The multiplication symbol (*),  without blank spaces in   !
! between, is allowed for a parameter specification.  For example, in a two   !
! grids nested application:                                                   !
!                                                                             !
!    AKT_BAK == 2*1.0d-6  2*5.0d-6              ! m2/s                        !
!                                                                             !
! indicates that the first two entries of array AKT_BAK,  in fortran column-  !
! major order, will have the same value of "1.0d-6" for grid 1,  whereas the  !
! next two entries will have the same value of "5.0d-6" for grid 2.           !
!                                                                             !
! In multiple levels of nesting and/or multiple connected domains  step-ups,  !
! "Ngrids" entries are expected for some of these parameters.  In such case,  !
! the order of the entries for a parameter is extremely important.  It  must  !
! follow the same order (1:Ngrids) as in the state variable declaration. The  !
! USER may follow the above guidelines for specifying his/her values.  These  !
! parameters are marked by "==" plural symbol after the KEYWORD.              !
!                                                                             !
! Multiple NetCDF files are allowed for input field(s).  This is useful when  !
! splitting input data (climatology,  boundary,  forcing)  time records into  !
! several files (say monthly, annual, etc). In this case, each multiple file  !
! entry line needs to be ended by the vertical bar (|) symbol. For example:   !
!                                                                             !
!    NFFILES == 7                          ! number of forcing files          !
!                                                                             !
!    FRCNAME == my_tides.nc       \                                           !
!               my_lwrad_year1.nc |                                           !
!               my_lwrad_year2.nc \                                           !
!               my_swrad_year1.nc |                                           !
!               my_swrad_year2.nc \                                           !
!               my_winds_year1.nc |                                           !
!               my_winds_year2.nc \                                           !
!               my_Pair_year1.nc  |                                           !
!               my_Pair_year2.nc  \                                           !
!               my_Qair_year1.nc  |                                           !
!               my_Qair_year2.nc  \                                           !
!               my_Tair_year1.nc  |                                           !
!               my_Tair_year2.nc                                              !
!                                                                             !
! Notice that NFFILES is 7 and not 13. There are 7 uniquely different fields  !
! in the file list,  we  DO NOT  count file entries followed by the vertical  !
! bar symbol.  This is because  multiple file  entries are processed in ROMS  !
! with derived type structures.                                               !
!                                                                             !
!==============================================================================
!
! Application title.

       TITLE = Suspended Sediment Test in a Channel

! C-preprocessing Flag.

    MyAppCPP = SED_TEST1

! Input variable information file name.  This file needs to be processed
! first so all information arrays can be initialized properly.

     VARNAME = ROMS/External/varinfo.dat

! Number of nested grids.

      Ngrids =  1

! Number of grid nesting layers.  This parameter is used to allow refinement
! and composite grid combinations.

  NestLayers =  1

! Number of grids in each nesting layer [1:NestLayers].

GridsInLayer =  1

! Grid dimension parameters. See notes below in the Glossary for how to set
! these parameters correctly.

          Lm == 100           ! Number of I-direction INTERIOR RHO-points
          Mm == 12            ! Number of J-direction INTERIOR RHO-points
           N == 10            ! Number of vertical levels

        Nbed =  1             ! Number of sediment bed layers

         NAT =  2             ! Number of active tracers (usually, 2)
         NPT =  0             ! Number of inactive passive tracers
         NCS =  1             ! Number of cohesive (mud) sediment tracers
         NNS =  1             ! Number of non-cohesive (sand) sediment tracers

! Domain decomposition parameters for serial, distributed-memory or
! shared-memory configurations used to determine tile horizontal range
! indices (Istr,Iend) and (Jstr,Jend), [1:Ngrids].

      NtileI == 1                               ! I-direction partition
      NtileJ == 1                               ! J-direction partition

! Set lateral boundary conditions keyword. Notice that a value is expected
! for each boundary segment per nested grid for each state variable.
!
! Each tracer variable requires [1:4,1:NAT+NPT,Ngrids] values. Otherwise,
! [1:4,1:Ngrids] values are expected for other variables. The boundary
! order is: 1=west, 2=south, 3=east, and 4=north. That is, anticlockwise
! starting at the western boundary.
!
! The keyword is case insensitive and usually has three characters. However,
! it is possible to have compound keywords, if applicable. For example, the
! keyword "RadNud" implies radiation boundary condition with nudging. This
! combination is usually used in active/passive radiation conditions.
!
!   Keyword    Lateral Boundary Condition Type
!
!   Cha        Chapman_implicit (free-surface)
!   Che        Chapman_explicit (free-surface)
!   Cla        Clamped
!   Clo        Closed
!   Fla        Flather (2D momentum)                  _____N_____     j=Mm
!   Gra        Gradient                              |     4     |
!   Nes        Nested (refinement)                   |           |
!   Nud        Nudging                             1 W           E 3
!   Per        Periodic                              |           |
!   Rad        Radiation                             |_____S_____|
!   Red        Reduced Physics (2D momentum)               2          j=1
!   Shc        Shchepetkin (2D momentum)            i=1         i=Lm
!
!                   W       S       E       N
!                   e       o       a       o
!                   s       u       s       r
!                   t       t       t       t
!                           h               h
!
!                   1       2       3       4

   LBC(isFsur) ==   Rad     Clo     Cla     Clo         ! free-surface
   LBC(isUbar) ==   Rad     Clo     Rad     Clo         ! 2D U-momentum
   LBC(isVbar) ==   Rad     Clo     Rad     Clo         ! 2D V-momentum
   LBC(isUvel) ==   Rad     Clo     Rad     Clo         ! 3D U-momentum
   LBC(isVvel) ==   Rad     Clo     Rad     Clo         ! 3D V-momentum
   LBC(isMtke) ==   Gra     Clo     Gra     Clo         ! mixing TKE

   LBC(isTvar) ==   Gra     Clo     Cla     Clo \       ! temperature
                    Gra     Clo     Cla     Clo         ! salinity

! Ice boundary conditions

   LBC(isAice) ==   Clo     Clo     Clo     Clo         ! ice concentration
   LBC(isHice) ==   Clo     Clo     Clo     Clo         ! ice thickness
   LBC(isHsno) ==   Clo     Clo     Clo     Clo         ! snow thickness
   LBC(isTice) ==   Clo     Clo     Clo     Clo         ! ice temperature
   LBC(isApond)==   Clo     Clo     Clo     Clo         ! surface water
   LBC(isHpond)==   Clo     Clo     Clo     Clo         ! surface water
   LBC(isSig11)==   Clo     Clo     Clo     Clo         ! sigma-11
   LBC(isSig12)==   Clo     Clo     Clo     Clo         ! sigma-12
   LBC(isSig22)==   Clo     Clo     Clo     Clo         ! sigma-22
   LBC(isUice) ==   Clo     Clo     Clo     Clo         ! ice U-momentum
   LBC(isVice) ==   Clo     Clo     Clo     Clo         ! ice V-momentum

! Adjoint-based algorithms can have different lateral boundary
! conditions keywords.

ad_LBC(isFsur) ==   Rad     Clo     Cla     Clo         ! free-surface
ad_LBC(isUbar) ==   Rad     Clo     Rad     Clo         ! 2D U-momentum
ad_LBC(isVbar) ==   Rad     Clo     Rad     Clo         ! 2D U-momentum
ad_LBC(isUvel) ==   Rad     Clo     Rad     Clo         ! 3D U-momentum
ad_LBC(isVvel) ==   Rad     Clo     Rad     Clo         ! 3D V-momentum
ad_LBC(isMtke) ==   Gra     Clo     Gra     Clo         ! mixing TKE

ad_LBC(isTvar) ==   Gra     Clo     Cla     Clo \       ! temperature
                    Gra     Clo     Cla     Clo         ! salinity

! Set lateral open boundary edge volume conservation switch for
! nonlinear model and adjoint-based algorithms. Usually activated
! with radiation boundary conditions to enforce global mass
! conservation, except if tidal forcing is enabled. [1:Ngrids].

   VolCons(west)  ==  F                            ! western  boundary
   VolCons(east)  ==  F                            ! eastern  boundary
   VolCons(south) ==  F                            ! southern boundary
   VolCons(north) ==  F                            ! northern boundary

ad_VolCons(west)  ==  F                            ! western  boundary
ad_VolCons(east)  ==  F                            ! eastern  boundary
ad_VolCons(south) ==  F                            ! southern boundary
ad_VolCons(north) ==  F                            ! northern boundary

! Time-Stepping parameters.

      NTIMES == 1000
          DT == 1.0d0
     NDTFAST == 20

! Model iteration loops parameters.

       ERstr =  1
       ERend =  1
      Nouter =  1
      Ninner =  1
  Nintervals =  1

! Number of eigenvalues (NEV) and eigenvectors (NCV) to compute for the
! Lanczos/Arnoldi problem in the Generalized Stability Theory (GST)
! analysis. NCV must be greater than NEV (see documentation below).

         NEV =  2                               ! Number of eigenvalues
         NCV =  10                              ! Number of eigenvectors

! Input/Output parameters.

       NRREC == 0
   LcycleRST == T
        NRST == 1000
        NSTA == 1
        NFLT == 1
       NINFO == 1

! Output history, average, diagnostic files parameters.

     LDEFOUT == T
        NHIS == 100
     NDEFHIS == 0
      NTSAVG == 1
        NAVG == 1000
     NDEFAVG == 0
      NTSDIA == 1
        NDIA == 1000
     NDEFDIA == 0

! Output tangent linear and adjoint models parameters.

   LcycleTLM == F
        NTLM == 50
     NDEFTLM == 0
   LcycleADJ == F
        NADJ == 50
     NDEFADJ == 0
        NSFF == 50
        NOBC == 50

! GST output and check pointing restart parameters.

   LmultiGST =  F                               ! one eigenvector per file
     LrstGST =  F                               ! GST restart switch
  MaxIterGST =  500                             ! maximum number of iterations
        NGST =  10                              ! check pointing interval

! Relative accuracy of the Ritz values computed in the GST analysis.

    Ritz_tol =  1.0d-15

! Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model
! and adjoint-based algorithms: [1:NAT+NPT,Ngrids].

        TNU2 == 0.0d0  0.0d0                    ! m2/s
        TNU4 == 0.0d0  0.0d0                    ! m4/s

     ad_TNU2 == 0.0d0  0.0d0                    ! m2/s
     ad_TNU4 == 0.0d0  0.0d0                    ! m4/s

! Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
! and adjoint-based algorithms: [Ngrids].

       VISC2 == 0.0d0                           ! m2/s
       VISC4 == 0.0d0                           ! m4/s

    ad_VISC2 == 0.0d0                           ! m2/s
    ad_VISC4 == 0.0d0                           ! m4/s

! Logical switches (TRUE/FALSE) to increase/decrease horizontal viscosity
! and/or diffusivity in specific areas of the application domain (like
! sponge areas) for the desired application grid.

    LuvSponge == F                              ! horizontal momentum
LtracerSponge == F F                            ! temperature, salinity, inert

! Vertical mixing coefficients for tracers in nonlinear model and
! basic state scale factor in adjoint-based algorithms: [1:NAT+NPT,Ngrids]

     AKT_BAK == 5.0d-6  5.0d-6                  ! m2/s

  ad_AKT_fac == 1.0d0  1.0d0                    ! nondimensional

! Vertical mixing coefficient for momentum for nonlinear model and
! basic state scale factor in adjoint-based algorithms: [Ngrids].

     AKV_BAK == 5.0d-5                          ! m2/s

  ad_AKV_fac == 1.0d0                           ! nondimensional

! Turbulent closure parameters.

     AKK_BAK == 5.0d-6                          ! m2/s
     AKP_BAK == 5.0d-6                          ! m2/s
      TKENU2 == 0.0d0                           ! m2/s
      TKENU4 == 0.0d0                           ! m4/s

! Generic length-scale turbulence closure parameters.

       GLS_P == 3.0d0                           ! K-epsilon
       GLS_M == 1.5d0
       GLS_N == -1.0d0
    GLS_Kmin == 7.6d-6
    GLS_Pmin == 1.0d-12

    GLS_CMU0 == 0.5477d0
      GLS_C1 == 1.44d0
      GLS_C2 == 1.92d0
     GLS_C3M == -0.4d0
     GLS_C3P == 1.0d0
    GLS_SIGK == 1.0d0
    GLS_SIGP == 1.30d0

! Constants used in surface turbulent kinetic energy flux computation.

  CHARNOK_ALPHA == 1400.0d0         ! Charnok surface roughness
 ZOS_HSIG_ALPHA == 0.5d0            ! roughness from wave amplitude
       SZ_ALPHA == 0.25d0           ! roughness from wave dissipation
      CRGBAN_CW == 100.0d0          ! Craig and Banner wave breaking

! Constants used in momentum stress computation.

        RDRG == 3.0d-04                    ! m/s
       RDRG2 == 3.0d-03                    ! nondimensional
         Zob == 0.005d0                    ! m
         Zos == 0.02d0                     ! m

! Height (m) of atmospheric measurements for Bulk fluxes parameterization.

      BLK_ZQ == 10.0d0                     ! air humidity
      BLK_ZT == 10.0d0                     ! air temperature
      BLK_ZW == 10.0d0                     ! winds

! Minimum depth for wetting and drying.

       DCRIT == 0.10d0                     ! m

! Various parameters.

       WTYPE == 1
     LEVSFRC == 15
     LEVBFRC == 1

! Set vertical, terrain-following coordinates transformation equation and
! stretching function (see below for details), [1:Ngrids].

  Vtransform == 1                          ! transformation equation
 Vstretching == 1                          ! stretching function

! Vertical S-coordinates parameters (see below for details), [1:Ngrids].

     THETA_S == 1.0d0                      ! surface stretching parameter
     THETA_B == 1.0d0                      ! bottom  stretching parameter
      TCLINE == 1.0d0                      ! critical depth (m)

! Mean Density and Brunt-Vaisala frequency.

        RHO0 =  998.0d0                    ! kg/m3
     BVF_BAK =  1.0d-5                     ! 1/s2

! Time-stamp assigned for model initialization, reference time
! origin for tidal forcing, and model reference time for output
! NetCDF units attribute.

      DSTART =  0.0d0                      ! days
  TIDE_START =  0.0d0                      ! days
    TIME_REF =  0.0d0                      ! yyyymmdd.dd

! Nudging/relaxation time scales, inverse scales will be computed
! internally, [1:Ngrids].

       TNUDG == 0.0d0  0.0d0               ! days
       ZNUDG == 0.001d0                    ! days
      M2NUDG == 0.001d0                    ! days
      M3NUDG == 0.001d0                    ! days

! Nudging/relaxation time scale for surface salinity nudging, inverse
! scales will be computed internally, [1:Ngrids].

       TNUDG_SSS == 90.0d0                 ! days

! Threshold to trigger SSS correction toward climatolgy,
! needs SCORRECTION and SSSC_THRESHOLD defined

       SSS_MISMATCH_THRESHOLD = 0.2d0

! Factor between passive (outflow) and active (inflow) open boundary
! conditions, [1:Ngrids]. If OBCFAC > 1, nudging on inflow is stronger
! than on outflow (recommended).

      OBCFAC == 0.0d0                      ! nondimensional

! Linear equation of State parameters:

          R0 == 1027.0d0                   ! kg/m3
          T0 == 20.0d0                     ! Celsius
          S0 == 35.0d0                     ! nondimensional
       TCOEF == 1.7d-4                     ! 1/Celsius
       SCOEF == 7.6d-4                     ! nondimensional

! Slipperiness parameter: 1.0 (free slip) or -1.0 (no slip)

      GAMMA2 == 1.0d0

! Logical switches (TRUE/FALSE) to activate horizontal momentum transport
! point Sources/Sinks (like river runoff transport) and mass point
! Sources/Sinks (like volume vertical influx), [1:Ngrids].

      LuvSrc == T                          ! horizontal momentum transport
       LwSrc == F                          ! volume vertical influx

! Logical switches (TRUE/FALSE) to activate tracers point Sources/Sinks
! (like river runoff) and to specify which tracer variables to consider:
! [1:NAT+NPT,Ngrids].  See glossary below for details.

  LtracerSrc == F F                        ! temperature, salinity, inert

! Logical switches (TRUE/FALSE) to read and process climatology fields.
! See glossary below for details.

     LsshCLM == F                          ! sea-surface height
      Lm2CLM == F                          ! 2D momentum
      Lm3CLM == F                          ! 3D momentum

  LtracerCLM == F F                        ! temperature, salinity, inert

! Logical switches (TRUE/FALSE) to nudge the desired climatology field(s).
! If not analytical climatology fields, users need to turn ON the logical
! switches above to process the fields from the climatology NetCDF file
! that are needed for nudging. See glossary below for details.

 LnudgeM2CLM == F                          ! 2D momentum
 LnudgeM3CLM == F                          ! 3D momentum

  LnudgeTCLM == F F                        ! temperature, salinity, inert

! Starting (DstrS) and ending (DendS) day for adjoint sensitivity forcing.
! DstrS must be less or equal to DendS. If both values are zero, their
! values are reset internally to the full range of the adjoint integration.

       DstrS == 0.0d0                      ! starting day
       DendS == 0.0d0                      ! ending day

! Starting and ending vertical levels of the 3D adjoint state variables
! whose sensitivity is required.

       KstrS == 1                          ! starting level
       KendS == 1                          ! ending level

! Logical switches (TRUE/FALSE) to specify the adjoint state variables
! whose sensitivity is required.

Lstate(isFsur) == F                        ! free-surface
Lstate(isUbar) == F                        ! 2D U-momentum
Lstate(isVbar) == F                        ! 2D V-momentum
Lstate(isUvel) == F                        ! 3D U-momentum
Lstate(isVvel) == F                        ! 3D V-momentum

Lstate(isTvar) == F F                      ! NT tracers

! Logical switches (TRUE/FALSE) to specify the state variables for
! which Forcing Singular Vectors or Stochastic Optimals is required.

Fstate(isFsur) == F                        ! free-surface
Fstate(isUbar) == F                        ! 2D U-momentum
Fstate(isVbar) == F                        ! 2D V-momentum
Fstate(isUvel) == F                        ! 3D U-momentum
Fstate(isVvel) == F                        ! 3D V-momentum
Fstate(isTvar) == F F                      ! NT tracers

Fstate(isUstr) == T                        ! surface U-stress
Fstate(isVstr) == T                        ! surface V-stress
Fstate(isTsur) == F F                      ! NT surface tracers flux

! Stochastic Optimals time decorrelation scale (days) assumed for
! red noise processes.

      SO_decay == 2.0d0                    ! days

! Stochastic Optimals surface forcing standard deviation for
! dimensionalization.

SO_sdev(isFsur) == 1.0d0                   ! free-surface
SO_sdev(isUbar) == 1.0d0                   ! 2D U-momentum
SO_sdev(isVbar) == 1.0d0                   ! 2D V-momentum
SO_sdev(isUvel) == 1.0d0                   ! 3D U-momentum
SO_sdev(isVvel) == 1.0d0                   ! 3D V-momentum
SO_sdev(isTvar) == 1.0d0 1.0d0             ! NT tracers

SO_sdev(isUstr) == 1.0d0                   ! surface U-stress
SO_sdev(isVstr) == 1.0d0                   ! surface V-stress
SO_sdev(isTsur) == 1.0d0 1.0d0             ! NT surface tracers flux

! Logical switches (TRUE/FALSE) to activate writing of fields into
! HISTORY output file.

Hout(idUvel) == T       ! u                  3D U-velocity
Hout(idVvel) == T       ! v                  3D V-velocity
Hout(idu3dE) == F       ! u_eastward         3D U-eastward  at RHO-points
Hout(idv3dN) == F       ! v_northward        3D V-northward at RHO-points
Hout(idWvel) == T       ! w                  3D W-velocity
Hout(idOvel) == T       ! omega              omega vertical velocity
Hout(idUbar) == T       ! ubar               2D U-velocity
Hout(idVbar) == T       ! vbar               2D V-velocity
Hout(idu2dE) == F       ! ubar_eastward      2D U-eastward  at RHO-points
Hout(idv2dN) == F       ! vbar_northward     2D V-northward at RHO-points
Hout(idFsur) == T       ! zeta               free-surface
Hout(idBath) == T       ! bath               time-dependent bathymetry

Hout(idTvar) == T T     ! temp, salt         temperature and salinity

Hout(idUsms) == F       ! sustr              surface U-stress
Hout(idVsms) == F       ! svstr              surface V-stress
Hout(idUbms) == T       ! bustr              bottom U-stress
Hout(idVbms) == T       ! bvstr              bottom V-stress

Hout(idUbrs) == F       ! bustrc             bottom U-current stress
Hout(idVbrs) == F       ! bvstrc             bottom V-current stress
Hout(idUbws) == F       ! bustrw             bottom U-wave stress
Hout(idVbws) == F       ! bvstrw             bottom V-wave stress
Hout(idUbcs) == F       ! bustrcwmax         bottom max wave-current U-stress
Hout(idVbcs) == F       ! bvstrcwmax         bottom max wave-current V-stress

Hout(idUbot) == T       ! Ubot               bed wave orbital U-velocity
Hout(idVbot) == T       ! Vbot               bed wave orbital V-velocity
Hout(idUbur) == T       ! Ur                 bottom U-velocity above bed
Hout(idVbvr) == T       ! Vr                 bottom V-velocity above bed

Hout(idW2xx) == T       ! Sxx_bar            2D radiation stress, Sxx component
Hout(idW2xy) == T       ! Sxy_bar            2D radiation stress, Sxy component
Hout(idW2yy) == T       ! Syy_bar            2D radiation stress, Syy component
Hout(idU2rs) == T       ! Ubar_Rstress       2D radiation U-stress
Hout(idV2rs) == T       ! Vbar_Rstress       2D radiation V-stress
Hout(idU2Sd) == T       ! ubar_stokes        2D U-Stokes velocity
Hout(idV2Sd) == T       ! vbar_stokes        2D V-Stokes velocity

Hout(idW3xx) == T       ! Sxx                3D radiation stress, Sxx component
Hout(idW3xy) == T       ! Sxy                3D radiation stress, Sxy component
Hout(idW3yy) == T       ! Syy                3D radiation stress, Syy component
Hout(idW3zx) == T       ! Szx                3D radiation stress, Szx component
Hout(idW3zy) == T       ! Szy                3D radiation stress, Szy component
Hout(idU3rs) == T       ! u_Rstress          3D U-radiation stress
Hout(idV3rs) == T       ! v_Rstress          3D V-radiation stress
Hout(idU3Sd) == T       ! u_stokes           3D U-Stokes velocity
Hout(idV3Sd) == T       ! v_stokes           3D V-Stokes velocity

Hout(idWamp) == F       ! Hwave              wave height
Hout(idWlen) == F       ! Lwave              wave length
Hout(idWdir) == F       ! Dwave              wave direction
Hout(idWptp) == F       ! Pwave_top          wave surface period
Hout(idWpbt) == F       ! Pwave_bot          wave bottom period
Hout(idWorb) == F       ! Ub_swan            wave bottom orbital velocity
Hout(idWdis) == F       ! Wave_dissip        wave dissipation

Hout(idPair) == F       ! Pair               surface air pressure
Hout(idUair) == F       ! Uair               surface U-wind component
Hout(idVair) == F       ! Vair               surface V-wind component

Hout(idTsur) == F F     ! shflux, ssflux     surface net heat and salt flux
Hout(idLhea) == F       ! latent             latent heat flux
Hout(idShea) == F       ! sensible           sensible heat flux
Hout(idLrad) == F       ! lwrad              longwave radiation flux
Hout(idSrad) == F       ! swrad              shortwave radiation flux
Hout(idEmPf) == F       ! EminusP            E-P flux
Hout(idevap) == F       ! evaporation        evaporation rate
Hout(idrain) == F       ! rain               precipitation rate

Hout(idDano) == T       ! rho                density anomaly
Hout(idVvis) == T       ! AKv                vertical viscosity
Hout(idTdif) == T       ! AKt                vertical T-diffusion
Hout(idSdif) == F       ! AKs                vertical Salinity diffusion
Hout(idHsbl) == F       ! Hsbl               depth of surface boundary layer
Hout(idHbbl) == F       ! Hbbl               depth of bottom boundary layer
Hout(idMtke) == T       ! tke                turbulent kinetic energy
Hout(idMtls) == T       ! gls                turbulent length scale

! Logical switches (TRUE/FALSE) to activate writing of extra inert passive
! tracers other than biological and sediment tracers. An inert passive tracer
! is one that it is only advected and diffused. Other processes are ignored.
! These tracers include, for example, dyes, pollutants, oil spills, etc.
! NPT values are expected. However, these switches can be activated using
! compact parameter specification.

 Hout(inert) == T       ! dye_01, ...        inert passive tracers
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of time-averaged fields into
! AVERAGE file.
!------------------------------------------------------------------------------
!
! Aout(idUvel)   Write out 3D U-velocity component.
! Aout(idVvel)   Write out 3D V-velocity component.
! Aout(idu3dE)   Write out 3D Eastward  velocity component at RHO-points.
! Aout(idv3dN)   Write out 3D Northward velocity component at RHO-points.
! Aout(idWvel)   Write out 3D W-velocity component.
! Aout(idOvel)   Write out 3D omega vertical velocity.
! Aout(idUbar)   Write out 2D U-velocity component.
! Aout(idVbar)   Write out 2D V-velocity component.
! Aout(idu2dE)   Write out 2D Eastward  velocity component at RHO-points.
! Aout(idv2dN)   Write out 2D Northward velocity component at RHO-points.
! Aout(idFsur)   Write out free-surface.
!
! Aout(idTvar)   Write out active (NAT) tracers: temperature and salinity.
!
! Aout(idUsms)   Write out surface U-momentum stress.
! Aout(idVsms)   Write out surface V-momentum stress.
! Aout(idUbms)   Write out bottom  U-momentum stress.
! Aout(idVbms)   Write out bottom  V-momentum stress.
!
! Aout(idW2xx)   Write out 2D radiation stress, Sxx component.
! Aout(idW2xy)   Write out 2D radiation stress, Sxy component.
! Aout(idW2yy)   Write out 2D radiation stress, Syy component.
! Aout(idU2rs)   Write out 2D U-radiation stress.
! Aout(idV2rs)   Write out 2D V-radiation stress.
! Aout(idU2Sd)   Write out 2D U-Stokes velocity.
! Aout(idV2Sd)   Write out 2D V-Stokes velocity.
!
! Aout(idW3xx)   Write out 3D radiation stress, Sxx component.
! Aout(idW3xy)   Write out 3D radiation stress, Sxy component.
! Aout(idW3yy)   Write out 3D radiation stress, Syy component.
! Aout(idW3zx)   Write out 3D radiation stress, Szx component.
! Aout(idW3zy)   Write out 3D radiation stress, Szy component.
! Aout(idU3rs)   Write out 3D U-radiation stress.
! Aout(idV3rs)   Write out 3D V-radiation stress.
! Aout(idU3Sd)   Write out 3D U-Stokes velocity.
! Aout(idV3Sd)   Write out 3D V-Stokes velocity.
!
! Aout(idPair)   Write out surface air pressure.
! Aout(idUair)   Write out surface U-wind component.
! Aout(idVair)   Write out surface V-wind component.
!
! Aout(idTsur)   Write out surface net heat and salt flux
! Aout(idLhea)   Write out latent heat flux.
! Aout(idShea)   Write out sensible heat flux.
! Aout(idLrad)   Write out long-wave radiation flux.
! Aout(idSrad)   Write out short-wave radiation flux.
! Aout(idevap)   Write out evaporation rate.
! Aout(idrain)   Write out precipitation rate.
!
! Aout(idDano)   Write out density anomaly.
! Aout(idVvis)   Write out vertical viscosity coefficient.
! Aout(idTdif)   Write out vertical diffusion coefficient of temperature.
! Aout(idSdif)   Write out vertical diffusion coefficient of salinity.
! Aout(idHsbl)   Write out depth of oceanic surface boundary layer.
! Aout(idHbbl)   Write out depth of oceanic bottom boundary layer.
!
! Aout(id2dRV)   Write out 2D relative vorticity (vertically integrated).
! Aout(id3dRV)   Write out 3D relative vorticity.
! Aout(id2dPV)   Write out 2D potential vorticity (shallow water).
! Aout(id3dPV)   Write out 3D potential vorticity.
!
! Aout(idu3dD)   Write out detided 3D U-velocity.
! Aout(idv3dD)   Write out detided 3D V-velocity.
! Aout(idu2dD)   Write out detided 2D U-velocity.
! Aout(idv2dD)   Write out detided 2D V-velocity.
! Aout(idFsuD)   Write out detided free-surface
!
! Aout(idTrcD)   Write out detided temperature and salinity.
!
! Aout(idHUav)   Write out u-volume flux, Huon.
! Aout(idHVav)   Write out v-volume flux, Hvom.
! Aout(idUUav)   Write out quadratic <u*u> term.
! Aout(idUVav)   Write out quadratic <u*v> term.
! Aout(idVVav)   Write out quadratic <v*v> term.
! Aout(idU2av)   Write out quadratic <ubar*ubar> term.
! Aout(idV2av)   Write out quadratic <vbar*vbar> term.
! Aout(idZZav)   Write out quadratic <zeta*zeta> term.
!
! Aout(idTTav)   Write out quadratic <t*t> active and inert tracers terms.
! Aout(idUTav)   Write out quadratic <u*t> active and inert tracers terms.
! Aout(idVTav)   Write out quadratic <v*t> active and inert tracers terms.
! Aout(iHUTav)   Write out active and inert tracer u-volume flux, <Huon*t>.
! Aout(iHVTav)   Write out active and inert tracer v-volume flux, <Hvom*t>.
!
! Aout(inert)    Write out extra inert passive tracers.
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of time-averaged fields into
! DIAGNOSTIC file.
!------------------------------------------------------------------------------
!
! Time-averaged, 2D momentum (ubar,vbar) diagnostic terms:
! (if DIAGNOSTICS_UV)
!
! Dout(M2rate)   Write out acceleration.
! Dout(M2pgrd)   Write out pressure gradient.
! Dout(M2fcor)   Write out Coriolis force, if UV_COR.
! Dout(M2hadv)   Write out horizontal total advection, if UV_ADV.
! Dout(M2xadv)   Write out horizontal  XI-advection, if UV_ADV.
! Dout(M2yadv)   Write out horizontal ETA-advection, if UV_ADV.
! Dout(M2hrad)   Write out horizontal total radiation stress, NEARSHORE_MELLOR.
! Dout(M2hvis)   Write out horizontal total viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2xvis)   Write out horizontal  XI-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2sstr)   Write out surface stress.
! Dout(M2bstr)   Write out bottom stress
!
! Time-averaged, 3D momentum (u,v) diagnostic terms:
! (if SOLVE3D and DIAGNOSTICS_UV)
!
! Dout(M3rate)   Write out acceleration.
! Dout(M3pgrd)   Write out pressure gradient.
! Dout(M3fcor)   Write out Coriolis force, if UV_COR.
! Dout(M3hadv)   Write out horizontal total advection, if UV_ADV.
! Dout(M3xadv)   Write out horizontal  XI-advection, if UV_ADV.
! Dout(M3yadv)   Write out horizontal ETA-advection, if UV_ADV.
! Dout(M3hrad)   Write out horizontal total radiation stress, NEARSHORE_MELLOR.
! Dout(M3vrad)   Write out vertical radiation stress, if NEARSHORE_MELLOR.
! Dout(M3hvis)   Write out horizontal total viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3xvis)   Write out horizontal  XI-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3vvis)   Write out vertical viscosity.
!
! Time-averaged, active (temperature and salinity) and passive (inert) tracer
! diagnostic terms, [1:NAT+NPT,Ngrids] values expected:
! (if SOLVE3D and DIAGNOSTICS_TS)
!
! Dout(iTrate)   Write out time rate of change.
! Dout(iThadv)   Write out horizontal total advection.
! Dout(iTxadv)   Write out horizontal  XI-advection.
! Dout(iTyadv)   Write out horizontal ETA-advection.
! Dout(iTvadv)   Write out vertical advection.
! Dout(iThdif)   Write out horizontal total diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTxdif)   Write out horizonta1  XI-diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTydif)   Write out horizontal ETA-diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTsdif)   Write out horizontal   S-diffusion, if TS_DIF2 or TS_DIF4 and
!                  rotated tensor (MIX_GEO_TS or MIX_ISO_TS).
! Dout(iTvdif)   Write out vertical diffusion.
!
!------------------------------------------------------------------------------
! Generic User parameters.
!------------------------------------------------------------------------------
!
! NUSER        Number of User parameters to consider (integer).
!
! USER         Vector containing user parameters (real array). This array
!                is used with the SANITY_CHECK to test the correctness of
!                the tangent linear adjoint models.  It contains information
!                of the model variable and grid point to perturb:
!
!                INT(user(1)):  tangent state variable to perturb
!                INT(user(2)):  adjoint state variable to perturb
!                               [isFsur=1] free-surface
!                               [isUbar=2] 2D U-momentum
!                               [isVbar=3] 2D V-momentum
!                               [isUvel=4] 3D U-momentum
!                               [isVvel=5] 3D V-momentum
!                               [isTvar=6] First tracer (temperature)
!                               [   ...  ]
!                               [isTvar=?] Last tracer
!
!                INT(user(3)):  I-index of tangent variable to perturb
!                INT(user(4)):  I-index of adjoint variable to perturb
!                INT(user(5)):  J-index of tangent variable to perturb
!                INT(user(6)):  J-index of adjoint variable to perturb
!                INT(user(7)):  K-index of tangent variable to perturb, if 3D
!                INT(user(8)):  K-index of adjoint variable to perturb, if 3D
!
!                Set tangent and adjoint parameters to the same values
!                if perturbing and reporting the same variable.
!
!------------------------------------------------------------------------------
! I/O NetCDF files parameters.
!------------------------------------------------------------------------------
!
! NetCDF-4/HDF5 compression parameters for output files. This capability
! is used when both HDF5 and DEFLATE C-preprocessing options are
! activated. The user needs to compile with the NetCDF-4/HDF5 and MPI
! libraries. File deflation cannot be used in parallel I/O for writing
! because the compression makes it impossible for the HDF5 library
! to exactly map the data to the disk location.  For more information,
! check NetCDF official website: www.unidata.ucar.edu/software/netcdf.
!
! NC_SHUFFLE   Shuffle filter integer flag. If non-zero, turn on shuffle
!                filter.
!
! NC_DEFLATE   Deflate filter integer flag, If non-zero, turn on deflate
!                filter at the level specified by the NC_DLEVEL parameter.
!
! NC_DLEVEL    Deflate filter level parameter (integer). If NC_DEFLATE is
!                non-zero, set the deflate level to this value. Must be
!                between 0 and 9.
!
!------------------------------------------------------------------------------
! Input/output NetCDF file names (string with a maximum of 256 characters).
!------------------------------------------------------------------------------
!
! Input file names:
!
!  GRDNAME     Input grid file name.
!
!  ININAME     Input nonlinear initial conditions file name. It can be a
!                re-start file.
!
!  ITLNAME     Input tangent linear model initial conditions file name.
!
!  IRPNAME     Input representer model initial conditions file name.
!
!  IADNAME     Input adjoint model initial conditions file name.
!  FWDNAME     Input forward solution fields file name.
!
!  ADSNAME     Input adjoint sensitivity functional file name.
!
!
! Nesting grids connectivity data:
!
!  NGCNAME     Input nested grids contact points information file name. This
!                NetCDF file is currently generated using script:
!
!                matlab/grid/contact.m
!
!                from the ROMS Matlab repository.  The nesting information
!                is not trivial and this Matlab scripts is quite complex. See
!
!                https://www.myroms.org/wiki/index.php/Nested_Grids
!                https://www.myroms.org/wiki/index.php/Grid_Processing_Scripts
!
!                for more information.
!
!
! Input lateral boundary conditions and climatology file names:
!
! BRYNAME      Input open boundary data file name(s) per nested grid.
!
! CLMNAME      Input climatology fields file name(s) per nested grid
!
!  The USER has the option to split input data time records into several
!  NetCDF files, as many as required. If so, use a single line per entry
!  with a vertical bar (|) symbol after each entry, except the last one:
!
!    BRYNAME == my_bry_year1.nc |
!               my_bry_year2.nc
!
!    CLMNAME == my_clm_year1.nc |
!               my_clm_year2.nc
!
!
! Input nudging coefficients file name:
!
! NUDNAME      Input nudging coefficients file name.
!
!
! Input Sources/Sinks forcing file name:
!
! SSFNAME      River runoff data. This file is now separated from the
!                regular forcing files to allow manipulations over nested
!                grids.  A particular nesting grid may or may not have
!                Sources/Sinks forcing.
!
!                For example, in an application with 3 nested grids but
!                with river forcing in grids 1 and 3 we would have:
!
!                    LuvSrc == T F T
!                LtracerSrc == 2*T 2*F 2*T
!
!                   SSFNAME == my_rivers_grid1.nc \
!                              my_rivers_grid2.nc \
!                              my_rivers_grid3.nc
!
!                Here, "my_rivers_grid2.nc" is a dummy name that will never
!                be processed in ROMS because of the logical switches are
!                FALSE the second grid.
!
!
! Input forcing file(s) name:
!
! NFFILES      Number of unique forcing files per nested grid.
!
! FRCNAME      Input forcing fields file name per nested grid.
!
!  The USER has the option to enter several file names for forcing fields
!  and/or split input data time records for each nested grid. For example,
!  the USER may have different files for wind products, heat fluxes, tides,
!  etc.  The model will scan the file list and will read the needed data
!  from the first file in the list containing the forcing field. Therefore,
!  the order of the file names is very important. It is also possible to
!  split input data time records into several NetCDF files.
!
!  Use a single line per entry with a continuation (\) or vertical bar (|)
!  symbol after each entry, except the last one:
!
!    NFFILES == 7                          ! number of unique forcing files
!
!    FRCNAME == my_tides.nc       \        ! tidal forcing
!               my_lwrad_year1.nc |        ! net longwave radiation flux
!               my_lwrad_year2.nc \
!               my_swrad_year1.nc |        ! solar shortwave radiation flux
!               my_swrad_year2.nc \
!               my_winds_year1.nc |        ! surface winds
!               my_winds_year2.nc \
!               my_Pair_year1.nc  |        ! surface air pressure
!               my_Pair_year2.nc  \
!               my_Qair_year1.nc  |        ! surface air relative humidity
!               my_Qair_year2.nc  \
!               my_Tair_year1.nc  |        ! surface air temperature
!               my_Tair_year2.nc
!
!
! Output file names:
!
! GSTNAME      Output GST analysis re-start file name.
! RSTNAME      Output re-start file name.
! HISNAME      Output history file name.
! TLFNAME      Output impulse forcing for tangent linear (TLM and RPM) models.
! TLMNAME      Output tangent linear file name.
! ADJNAME      Output adjoint file name.
! AVGNAME      Output averages file name.
! DIANAME      Output diagnostics file name.
! STANAME      Output stations file name.
! FLTNAME      Output floats file name.
!
!------------------------------------------------------------------------------
! Input ASCII parameters file names.
!------------------------------------------------------------------------------
!
! APARNAM      Input assimilation parameters file name.
! SPOSNAM      Input stations positions file name.
! FPOSNAM      Input initial drifters positions file name.
! BPARNAM      Input biological parameters file name.
! SPARNAM      Input sediment transport parameters file name.
! USRNAME      USER's input generic file name.
!
